[{"D:\\ReactTraning\\01-starting-project\\src\\index.js":"1","D:\\ReactTraning\\01-starting-project\\src\\App.js":"2","D:\\ReactTraning\\01-starting-project\\src\\containers\\EmployeeBuilder.js":"3","D:\\ReactTraning\\01-starting-project\\src\\components\\Form\\EmployeeForm.js":"4","D:\\ReactTraning\\01-starting-project\\src\\components\\Dropdown\\Dropdown.js":"5","D:\\ReactTraning\\01-starting-project\\src\\Validator\\ValidationHooks.js":"6","D:\\ReactTraning\\01-starting-project\\src\\components\\DataTable\\DataTable.js":"7","D:\\ReactTraning\\01-starting-project\\src\\components\\Grid\\Grid.js":"8","D:\\ReactTraning\\01-starting-project\\src\\components\\GridSetting\\GridSetting.js":"9","D:\\ReactTraning\\01-starting-project\\src\\components\\DataGrid\\DataGrid.js":"10","D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\index.js":"11","D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\App.js":"12","D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\containers\\EmployeeBuilder.js":"13","D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\components\\GridSetting\\GridSetting.js":"14","D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\components\\Form\\EmployeeForm.js":"15","D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\components\\DataGrid\\DataGrid.js":"16","D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\Validator\\ValidationHooks.js":"17","D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\components\\Dropdown\\Dropdown.js":"18"},{"size":142,"mtime":1616595887000,"results":"19","hashOfConfig":"20"},{"size":180,"mtime":1618255909088,"results":"21","hashOfConfig":"20"},{"size":2145,"mtime":1618399522573,"results":"22","hashOfConfig":"20"},{"size":6001,"mtime":1618376259770,"results":"23","hashOfConfig":"20"},{"size":633,"mtime":1618393017334,"results":"24","hashOfConfig":"20"},{"size":1112,"mtime":1618256798967,"results":"25","hashOfConfig":"20"},{"size":3676,"mtime":1618340212924,"results":"26","hashOfConfig":"20"},{"size":912,"mtime":1618396174331,"results":"27","hashOfConfig":"20"},{"size":1595,"mtime":1618396978141,"results":"28","hashOfConfig":"20"},{"size":942,"mtime":1618396312658,"results":"29","hashOfConfig":"20"},{"size":142,"mtime":1616595888000,"results":"30","hashOfConfig":"31"},{"size":180,"mtime":1618255910000,"results":"32","hashOfConfig":"31"},{"size":2100,"mtime":1618464092382,"results":"33","hashOfConfig":"31"},{"size":1581,"mtime":1618465996420,"results":"34","hashOfConfig":"31"},{"size":6110,"mtime":1618466174394,"results":"35","hashOfConfig":"31"},{"size":942,"mtime":1618396314000,"results":"36","hashOfConfig":"31"},{"size":1112,"mtime":1618256800000,"results":"37","hashOfConfig":"31"},{"size":633,"mtime":1618393018000,"results":"38","hashOfConfig":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"swkn4j",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1sr1rce",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"D:\\ReactTraning\\01-starting-project\\src\\index.js",[],["79","80"],"D:\\ReactTraning\\01-starting-project\\src\\App.js",[],"D:\\ReactTraning\\01-starting-project\\src\\containers\\EmployeeBuilder.js",["81"],"D:\\ReactTraning\\01-starting-project\\src\\components\\Form\\EmployeeForm.js",["82","83"],"import React, { useState } from \"react\";\nimport Dropdown from \"../Dropdown/Dropdown\";\nimport ValidationHook from \"../../Validator/ValidationHooks\";\n\nconst DeptName = [\n  {\n    name: \"HR\",\n    value: \"HR\",\n  },\n  {\n    name: \"Development\",\n    value: \"Development\",\n  },\n  {\n    name: \"Accounts\",\n    value: \"Accounts\",\n  },\n  {\n    name: \"IT services\",\n    value: \"IT services\",\n  },\n];\nconst Designation = [\n  {\n    name: \"Manager\",\n    value: \"Manager\",\n  },\n  {\n    name: \"Lead\",\n    value: \"Lead\",\n  },\n];\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\n\nconst EmployeeForm = (props) => {\n  let isFormValid = false;\n  const {\n    value: employeeIDValue,\n    hasError: employeeIdHasError,\n    valueChangedHandler: employeeIdChangedHandler,\n    inputBluredHandler: employeeIdBluredHandler,\n    isValid: employeeIdIsValid,\n    reset: resetEmployeeId,\n    isPositive: positiveId,\n  } = ValidationHook(isNotEmpty, true);\n\n  const {\n    value: employeeNameValue,\n    hasError: employeeNameHasError,\n    valueChangedHandler: employeeNameChangedHandler,\n    inputBluredHandler: employeeNameBluredHandler,\n    isValid: employeeNameIsValid,\n    reset: resetEmployeeName,\n  } = ValidationHook(isNotEmpty);\n\n  const {\n    value: DesignationValue,\n    hasError: DesignationHasError,\n    valueChangedHandler: DesignationChangedHandler,\n    inputBluredHandler: DesignationBluredHandler,\n    isValid: DesignationIsValid,\n    reset: resetDesignation,\n  } = ValidationHook(isNotEmpty);\n\n  const {\n    value: DeptValue,\n    hasError: DeptHasError,\n    valueChangedHandler: DeptChangedHandler,\n    inputBluredHandler: DeptBluredHandler,\n    isValid: DeptIsValid,\n    reset: resetDept,\n  } = ValidationHook(isNotEmpty);\n  const {\n    value: SalaryValue,\n    hasError: SalaryHasError,\n    valueChangedHandler: SalaryChangedHandler,\n    inputBluredHandler: SalaryBluredHandler,\n    isValid: SalaryIsValid,\n    reset: resetSalary,\n    isPositive: positiveSalary,\n  } = ValidationHook(isNotEmpty, true);\n\n  if (\n    employeeIdIsValid &&\n    employeeNameIsValid &&\n    SalaryIsValid &&\n    DesignationIsValid\n  ) {\n    isFormValid = true;\n  }\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n    if (!isFormValid) {\n      return;\n    }\n\n    const newEmployee = {\n      EmployeeId: employeeIDValue,\n      EmployeeName: employeeNameValue,\n      Salary: SalaryValue,\n      Designation: DesignationValue,\n      Dept: DeptValue,\n      id: Math.round(Math.random() * (100 - 1)),\n    };\n    resetEmployeeId();\n    resetEmployeeName();\n    resetSalary();\n    resetDesignation();\n    resetDept();\n    props.addEmployee(newEmployee);\n  };\n  const employeeIdClasses =\n    employeeIdHasError || !positiveId ? \"form-control invalid\" : \"form-control\";\n  const employeeNameClasses = employeeNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const SalaryClasses =\n    SalaryHasError || !positiveSalary ? \"form-control invalid\" : \"form-control\";\n  const DesignationClasses = DesignationHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const DeptClasses = DeptHasError ? \"form-control invalid\" : \"form-control\";\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className=\"control-group\">\n        <div className={employeeIdClasses}>\n          <label htmlFor=\"EmployeeId\">Employee Id</label>\n          <input\n            type=\"text\"\n            id=\"EmployeeId\"\n            onChange={employeeIdChangedHandler}\n            onBlur={employeeIdBluredHandler}\n            value={employeeIDValue}\n          />\n        </div>\n        <div className={employeeNameClasses}>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            onChange={employeeNameChangedHandler}\n            onBlur={employeeNameBluredHandler}\n            value={employeeNameValue}\n            required\n          />\n        </div>\n      </div>\n      <div className=\"control-group\">\n        <div className={SalaryClasses}>\n          <label htmlFor=\"Salary\">Salary</label>\n          <input\n            type=\"text\"\n            id=\"Salary\"\n            onChange={SalaryChangedHandler}\n            onBlur={SalaryBluredHandler}\n            value={SalaryValue}\n          />\n        </div>\n        <div className={DeptClasses}>\n          <label htmlFor=\"name\">Dept Name</label>\n          <Dropdown\n            items={DeptName}\n            change={DeptChangedHandler}\n            blur={DeptBluredHandler}\n            value={DeptValue}\n          />\n        </div>\n      </div>\n      <div className=\"control-group\">\n        <div className={DesignationClasses}>\n          <label htmlFor=\"name\">Designation</label>\n          <Dropdown\n            items={Designation}\n            change={DesignationChangedHandler}\n            blur={DesignationBluredHandler}\n            value={DesignationValue}\n          />\n        </div>\n      </div>\n      <div className=\"control-group\">\n        <div className=\"form-control invalid\">\n          {employeeIdHasError && (\n            <p className=\"error-text\">Please enter Employee Id</p>\n          )}\n          {!positiveId && (\n            <p className=\"error-text\">\n              Please enter positive number only in Employee Id\n            </p>\n          )}\n          {employeeNameHasError && (\n            <p className=\"error-text\">Please enter Employee Name</p>\n          )}\n          {!positiveSalary && (\n            <p className=\"error-text\">\n              Please enter positive number only in Salary\n            </p>\n          )}\n          {SalaryHasError && <p className=\"error-text\">Please enter Salary</p>}\n          {DeptHasError && (\n            <p className=\"error-text\">Please select Department</p>\n          )}\n          {DesignationHasError && (\n            <p className=\"error-text\">Please select Designation</p>\n          )}\n        </div>\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!isFormValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default EmployeeForm;\n","D:\\ReactTraning\\01-starting-project\\src\\components\\Dropdown\\Dropdown.js",[],"D:\\ReactTraning\\01-starting-project\\src\\Validator\\ValidationHooks.js",[],"D:\\ReactTraning\\01-starting-project\\src\\components\\DataTable\\DataTable.js",[],["84","85"],"D:\\ReactTraning\\01-starting-project\\src\\components\\Grid\\Grid.js",["86","87"],"D:\\ReactTraning\\01-starting-project\\src\\components\\GridSetting\\GridSetting.js",["88"],"D:\\ReactTraning\\01-starting-project\\src\\components\\DataGrid\\DataGrid.js",[],"D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\index.js",[],["89","90"],"D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\App.js",[],"D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\containers\\EmployeeBuilder.js",[],"D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\components\\GridSetting\\GridSetting.js",[],"D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\components\\Form\\EmployeeForm.js",[],"D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\components\\DataGrid\\DataGrid.js",[],"D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\Validator\\ValidationHooks.js",[],"D:\\ReactTraning\\ReactAssignment\\Assignment\\src\\components\\Dropdown\\Dropdown.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":4,"column":8,"nodeType":"97","messageId":"98","endLine":4,"endColumn":12},{"ruleId":"95","severity":1,"message":"99","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":25},{"ruleId":"95","severity":1,"message":"100","line":71,"column":14,"nodeType":"97","messageId":"98","endLine":71,"endColumn":25},{"ruleId":"91","replacedBy":"101"},{"ruleId":"93","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":9,"column":6,"nodeType":"105","endLine":9,"endColumn":22},{"ruleId":"103","severity":1,"message":"106","line":9,"column":6,"nodeType":"105","endLine":9,"endColumn":22,"suggestions":"107"},{"ruleId":"95","severity":1,"message":"99","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":25},{"ruleId":"91","replacedBy":"108"},{"ruleId":"93","replacedBy":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'DeptIsValid' is assigned a value but never used.",["110"],["111"],"react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","MemberExpression","React Hook useEffect has a missing dependency: 'props.datasource'. Either include it or remove the dependency array. If 'setData' needs the current value of 'props.datasource', you can also switch to useReducer instead of useState and read 'props.datasource' in the reducer.",["112"],["110"],["111"],"no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},"Update the dependencies array to be: [props.datasource]",{"range":"115","text":"116"},[242,258],"[props.datasource]"]